# ---------------------------------------------------------------------------------
# Name: SpotifyNowPlaying
# Description: –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∏–æ —Å —Ç–µ–∫—É—â–∏–º —Ç—Ä–µ–∫–æ–º –∏–∑ Spotify (Arch Linux + KDE)
# Author: @YourNickname
# Commands: .spotifybio / .spotifyoff
# ---------------------------------------------------------------------------------

__version__ = (1, 0, 0)

import asyncio
import os
from telethon.tl.functions.account import UpdateProfileRequest
from .. import loader, utils
from dbus import SessionBus  # –ù–∞ Arch Linux —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç!

@loader.tds
class SpotifyNowPlayingMod(loader.Module):
    """–ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∏–æ —Å —Ç–µ–∫—É—â–∏–º —Ç—Ä–µ–∫–æ–º (Spotify + KDE Plasma)"""

    strings = {
        "name": "SpotifyNowPlaying",
        "on": "üéß <b>–ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∏–æ –≤–∫–ª—é—á–µ–Ω–æ!</b>",
        "off": "üéß <b>–ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∏–æ –≤—ã–∫–ª—é—á–µ–Ω–æ.</b>",
        "error": "‚ùå <b>–û—à–∏–±–∫–∞: Spotify –Ω–µ –∑–∞–ø—É—â–µ–Ω –∏–ª–∏ —Ç—Ä–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.</b>",
    }

    def __init__(self):
        self.running = False
        self.me = None

    async def client_ready(self, client, db):
        self.client = client
        self.me = await client.get_me()

    def get_spotify_track(self):
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Ç—Ä–µ–∫ —á–µ—Ä–µ–∑ DBUS (KDE Plasma)"""
        try:
            bus = SessionBus()
            spotify = bus.get_object(
                "org.mpris.MediaPlayer2.spotify",
                "/org/mpris/MediaPlayer2"
            )
            metadata = spotify.Get(
                "org.mpris.MediaPlayer2.Player",
                "Metadata",
                dbus_interface="org.freedesktop.DBus.Properties"
            )
            artist = ", ".join(metadata["xesam:artist"])
            title = metadata["xesam:title"]
            return f"{artist} - {title}"
        except Exception as e:
            print(f"DBUS error: {e}")
            return None

    async def update_bio_loop(self):
        """–¶–∏–∫–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∏–æ"""
        while self.running:
            track = self.get_spotify_track()
            if track:
                await self.client(UpdateProfileRequest(about=f"üéß {track}"))
            await asyncio.sleep(10)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫

    @loader.command(ru_doc="–í–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∏–æ")
    async def spotifybio(self, message):
        """–í–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ"""
        if self.running:
            await utils.answer(message, self.strings["on"])
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω –ª–∏ Spotify
        track = self.get_spotify_track()
        if not track:
            await utils.answer(message, self.strings["error"])
            return

        self.running = True
        asyncio.create_task(self.update_bio_loop())
        await utils.answer(message, self.strings["on"])

    @loader.command(ru_doc="–í—ã–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∏–æ")
    async def spotifyoff(self, message):
        """–í—ã–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ"""
        if not self.running:
            await utils.answer(message, self.strings["off"])
            return

        self.running = False
        await self.client(UpdateProfileRequest(about=""))
        await utils.answer(message, self.strings["off"])
